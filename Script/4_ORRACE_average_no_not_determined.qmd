---
title: "4_ORRACE_average_no_not_determined"
author: "Maiko Hata"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(rio)
library(knitr)
library(gt)
library(DT)
library(gtsummary)
library(kableExtra)
library(tinytex)
library(janitor)
library(tidylog)
library(sjPlot)
library(tibble)
library(dplyr)
library(epitools)
library(grateful)
library(readxl)
library(scales)
library(tidyr)
library(patchwork)
library(corrplot)
library(distill)
library(tibble)
library(rcartocolor)
library(ggplot2)
library(quarto)
library(knitr)
library(corrplot)
```

```{r}
race_oregon_no_not_determined <- read.csv(
  "/Users/hata/Desktop/EDLD652_Diss/Data/race_oregon_chart.csv"
)
```

```{r}
race_oregon_no_not_determined <- race_oregon_no_not_determined %>% 
  select(-Not.Determined)
```

```{r}
colnames(race_oregon_no_not_determined)
```

```{r}
colnames(race_oregon_no_not_determined) <- c(
  "Race",
  "Dismissed",
  "Moved Out",
  "Not Eligible", 
  "Part B Eligible",
  "Withdrawn"
)

```

```{r}
### 6.20.25. CHANGED THIS delete if it doesn't run 

race_oregon_no_not_determined$Race <- NULL

```

```{r}
### 6.20.25. CHANGED THIS delete if it doesn't run 

race_oregon_no_not_determined <- race_oregon_no_not_determined %>%
  tibble::rownames_to_column(var = "Race")

race_oregon_no_not_determined$Race <- c(
  "AI/AN", "Asian", "Black", "Hispanic", "Two+ Races", "NH/PI", "White"
)

```

```{r}
print(race_oregon_no_not_determined)
```

```{r}
library(dplyr)

# Step 1: Read CSV
race_oregon <- read.csv("/Users/hata/Desktop/EDLD652_Diss/Data/race_oregon_chart.csv", stringsAsFactors = FALSE)

# Step 2: Convert number columns (remove commas, ensure numeric)
race_oregon_clean <- race_oregon %>%
  mutate(across(-Race, ~ as.numeric(gsub(",", "", .)))) %>%
  ungroup()

# Step 3: Separate numeric columns (exit counts)
raw_only <- race_oregon_clean %>% select(-Race)

# Step 4: Compute row totals
row_totals <- rowSums(raw_only, na.rm = TRUE)

# Step 5: Calculate row-wise percentages
percent_matrix <- sweep(raw_only, 1, row_totals, FUN = "/") * 100

# Step 6: Format as "xx.xx% (raw)"
formatted <- mapply(
  function(p, r) sprintf("%.2f%% (%s)", p, format(r, big.mark = ",")),
  percent_matrix,
  raw_only,
  SIMPLIFY = FALSE
)

# Step 7: Reassemble formatted table
formatted_df <- as.data.frame(formatted, stringsAsFactors = FALSE)
formatted_df$Race <- race_oregon_clean$Race
formatted_df <- formatted_df %>% select(Race, everything())

# Step 8: View or export
View(formatted_df)
write.csv(formatted_df, "/Users/hata/Desktop/EDLD652_Diss/Data/race_oregon_formatted_by_row.csv", row.names = FALSE)

# ✅ APA-style note (updated for row-based calculation)
# Note. Values represent the percentage of exits within each racial group, with raw counts in parentheses. Percentages are rounded to two decimal places.

```

```{r}
# 6/28/25 Updating the number table to incorporate % per LINA 

# library(dplyr)
# 
# # Step 1: Read CSV
# race_oregon <- read.csv("/Users/hata/Desktop/EDLD652_Diss/Data/race_oregon_chart.csv", stringsAsFactors = FALSE)
# 
# # Step 2: Convert number columns (remove commas if needed, ensure numeric)
# race_oregon_clean <- race_oregon %>%
#   mutate(across(-Race, ~ as.numeric(gsub(",", "", .)))) %>%
#   ungroup()
# 
# # Step 3: Select numeric columns for percent calculation
# raw_only <- race_oregon_clean %>%
#   select(-Race)
# 
# # Step 4: Compute column totals
# exit_totals <- colSums(raw_only, na.rm = TRUE)
# 
# # Step 5: Calculate column-wise percentages
# percent_matrix <- sweep(raw_only, 2, exit_totals, FUN = "/") * 100
# 
# # Step 6: Format as "xx.xx% (raw)"
# formatted <- mapply(
#   function(p, r) sprintf("%.2f%% (%s)", p, format(r, big.mark = ",")),
#   percent_matrix,
#   raw_only,
#   SIMPLIFY = FALSE
# )
# 
# # Step 7: Assemble final formatted table
# formatted_df <- as.data.frame(formatted, stringsAsFactors = FALSE)
# formatted_df$Race <- race_oregon_clean$Race
# formatted_df <- formatted_df %>% select(Race, everything())
# 
# # Step 8: View or export
# View(formatted_df)
# 
# write.csv(formatted_df, "/Users/hata/Desktop/EDLD652_Diss/Data/race_oregon_formatted.csv", 
#           row.names = FALSE)

```

```{r}
### ✅ Step 1: Prepare the matrix

chi_matrix_oregon_no_not_determined <- as.matrix(race_oregon_no_not_determined[, 2:6])
rownames(chi_matrix_oregon_no_not_determined) <- race_oregon_no_not_determined$Race
```

```{r}
### ✅ Step 2: Run the chi-square test

chi_result_oregon_no_not_determined <- chisq.test(chi_matrix_oregon_no_not_determined)
```

```{r}
### ✅ Step 3: View the results

# Chi-square test output
chi_result_oregon_no_not_determined

# Standardized residuals (rounded for readability)
round(chi_result_oregon_no_not_determined$stdres, 2)
```

```{r}
# Convert standardized residuals to data frame with row names
chi_result_oregon_no_not_determined_stdres <- as.data.frame(chi_result_oregon_no_not_determined$stdres)
chi_result_oregon_no_not_determined_stdres <- tibble::rownames_to_column(chi_result_oregon_no_not_determined_stdres, var = "Race")

# Save as CSV
write.csv(
  chi_result_oregon_no_not_determined_stdres,
  "/Users/hata/Desktop/EDLD652_Diss/Data/chi_residuals_oregon_no_nd.csv",
  row.names = FALSE
)
```

```{r}
### For chi-square result write up 
sum(chi_matrix_oregon_no_not_determined)
```

```{r}
### Use this csv for the table to copy in diss results 
write.csv(chi_result_oregon_no_not_determined_stdres )
```

```{r}
### corrplot step 1
stdres_mat_oregon_no_not_determined <- round(chi_result_oregon_no_not_determined$stdres, 2)
```

```{r}
### corrplot step 2 --- fig-align: center

```

```{r}
corrplot(chi_result_oregon_no_not_determined$stdres, 
         is.cor = FALSE, 
         tl.cex = 0.8,  
         tl.col = "black", 
         cl.cex = 0.7,      
         cl.offset = 1,    
         cl.ratio = 0.2)  

```
