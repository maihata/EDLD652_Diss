---
title: "4_ORRACE_average_no_not_determined"
author: "Maiko Hata"
format: pdf
execute: 
  eval: true 
  echo: true
  message: true 
  warning: true
  error: true
editor: visual
engine: knitr
---

```{r}
library(tidyverse)
library(rio)
library(knitr)
library(gt)
library(DT)
library(gtsummary)
library(kableExtra)
library(tinytex)
library(janitor)
library(tidylog)
library(sjPlot)
library(tibble)
library(dplyr)
library(epitools)
library(grateful)
library(readxl)
library(scales)
library(tidyr)
library(patchwork)
library(corrplot)
library(distill)
library(tibble)
library(rcartocolor)
library(ggplot2)
library(quarto)
library(knitr)
library(corrplot)
```

```{r}
race_oregon_no_not_determined <- read.csv(
  "/Users/hata/Desktop/EDLD652_Diss/Data/race_oregon_chart.csv"
)
```

```{r}
race_oregon_no_not_determined <- race_oregon_no_not_determined %>% 
  select(-Not.Determined)
```

```{r}
colnames(race_oregon_no_not_determined)
```

```{r}
colnames(race_oregon_no_not_determined) <- c(
  "Race",
  "Dismissed",
  "Moved Out",
  "Not Eligible", 
  "Part B Eligible",
  "Withdrawn"
)

```

```{r}
### 6.20.25. CHANGED THIS delete if it doesn't run 

race_oregon_no_not_determined$Race <- NULL

```

```{r}
### 6.20.25. CHANGED THIS delete if it doesn't run 

race_oregon_no_not_determined <- race_oregon_no_not_determined %>%
  tibble::rownames_to_column(var = "Race")

race_oregon_no_not_determined$Race <- c(
  "AI/AN", "Asian", "Black", "Hispanic", "Two+ Races", "NH/PI", "White"
)

```

```{r}
print(race_oregon_no_not_determined)
```

```{r}
### ✅ Step 1: Prepare the matrix

chi_matrix_oregon_no_not_determined <- as.matrix(race_oregon_no_not_determined[, 2:6])
rownames(chi_matrix_oregon_no_not_determined) <- race_oregon_no_not_determined$Race
```

```{r}
### ✅ Step 2: Run the chi-square test

chi_result_oregon_no_not_determined <- chisq.test(chi_matrix_oregon_no_not_determined)
```

```{r}
### ✅ Step 3: View the results

# Chi-square test output
chi_result_oregon_no_not_determined

# Standardized residuals (rounded for readability)
round(chi_result_oregon_no_not_determined$stdres, 2)
```

```{r}
# Convert standardized residuals to data frame with row names
chi_result_oregon_no_not_determined_stdres <- as.data.frame(chi_result_oregon_no_not_determined$stdres)
chi_result_oregon_no_not_determined_stdres <- tibble::rownames_to_column(chi_result_oregon_no_not_determined_stdres, var = "Race")

# Save as CSV
write.csv(
  chi_result_oregon_no_not_determined_stdres,
  "/Users/hata/Desktop/EDLD652_Diss/Data/chi_residuals_oregon_no_nd.csv",
  row.names = FALSE
)
```

```{r}
### For chi-square result write up 
sum(chi_matrix_oregon_no_not_determined)
```

```{r}
### Use this csv for the table to copy in diss results 
write.csv(chi_result_oregon_no_not_determined_stdres )
```

```{r}
### corrplot step 1
stdres_mat_oregon_no_not_determined <- round(chi_result_oregon_no_not_determined$stdres, 2)
```

```{r}
stdres_mat_oregon_no_not_determined
```

```{r}
corrplot(chi_result_oregon_no_not_determined$stdres, 
         is.cor = FALSE, 
         tl.cex = 0.8,  
         tl.col = "black", 
         cl.cex = 0.7,      
         cl.offset = 1,    
         cl.ratio = 0.2)  

```

### ODDS RATIO — DISMISSED in Oregon by Race

```{r}
# ✅ Step 1: Create a new column for "Not Dismissed"
df_ore_dismissed <- race_oregon_no_not_determined %>%
  mutate(Not_Dismissed = rowSums(select(., -Race, -Dismissed)))

df_ore_dismissed
```

```{r}
# ✅ Step 2: Compute Oregon totals for Dismissed and Not Dismissed
oregon_dismissed <- sum(df_ore_dismissed$Dismissed)
oregon_not_dismissed <- sum(df_ore_dismissed$Not_Dismissed)

```

```{r}
# ✅ Step 3: Define a function to compute odds ratio vs Oregon overall average
get_dismissed_or <- function(group_row) {
  race <- df_ore_dismissed$Race[group_row]
  a <- df_ore_dismissed$Dismissed[group_row]       # Dismissed in group
  b <- df_ore_dismissed$Not_Dismissed[group_row]   # Not Dismissed in group
  c <- oregon_dismissed - a                        # Dismissed in rest of Oregon
  d <- oregon_not_dismissed - b                    # Not Dismissed in rest of Oregon

  mat <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE,
                dimnames = list(Group = c(race, "Oregon Average"),
                                Exit = c("Dismissed", "Not Dismissed")))

  result <- oddsratio(mat)
  return(result)
}

```

```{r}
# ✅ Step 4: Test the function for the first group (AI/AN)
get_dismissed_or(1)

```

```{r}
# ✅ Step 5: Create a list of row indices for each group
race_list_oregon <- seq_len(nrow(df_ore_dismissed))

```

```{r}
# ✅ Step 6: Run the odds ratio function for each group
dismissed_odds_results <- lapply(race_list_oregon, get_dismissed_or)
names(dismissed_odds_results) <- df_ore_dismissed$Race

```

```{r}
# ✅ Step 7: Extract odds ratio, CI, and p-value into a summary data frame
summary_df_odds_dismissed <- lapply(dismissed_odds_results, function(x) {
  data.frame(
    Odds_Ratio = x$measure[2, 1],
    Lower_CI = x$measure[2, 2],
    Upper_CI = x$measure[2, 3],
    P_Value = x$p.value[2, 1]
  )
}) %>%
  bind_rows(.id = "Race")

```

```{r}
# ✅ Step 8: Round for readability
summary_df_odds_dismissed <- summary_df_odds_dismissed %>%
  mutate(
    Odds_Ratio = round(Odds_Ratio, 2),
    Lower_CI = round(Lower_CI, 2),
    Upper_CI = round(Upper_CI, 2),
    P_Value = signif(P_Value, 3)
  )

```

```{r}
# ✅ Step 9: Write odds ratio summary to CSV
write.csv(
  summary_df_odds_dismissed,
  "/Users/hata/Desktop/EDLD652_Diss/Data/odds_dismissed_oregon.csv",
  row.names = FALSE
)

```

```{r}
summary_df_odds_dismissed
```

```{r}
summary_df_odds_dismissed$Race
```

```{r}
# Create the reference row
nat_avg_row <- data.frame(
  Race = "National Average",
  Odds_Ratio = 1,
  Lower_CI = 1,
  Upper_CI = 1,
  P_Value = NA
)

# Add to the summary table
summary_df_odds_dismissed <- bind_rows(summary_df_odds_dismissed, nat_avg_row)

```

```{r}
### To reorder the race categories alphabetically with "A" on top, you can explicitly set the factor levels for the Race variable before plotting:

summary_df_odds_dismissed$Race <- factor(
  summary_df_odds_dismissed$Race,
  levels = rev(c(
    sort(setdiff(summary_df_odds_dismissed$Race, c("White", "National Average"))),
    "White",
    "National Average"
  ))
)


```

```{r}
# ✅ Forest plot for 'Dismissed' exit category by race (Oregon)
ggplot(summary_df_odds_dismissed, aes(x = Odds_Ratio, y = Race)) +
  geom_point(color = "skyblue", size = 4) +
  geom_errorbarh(aes(xmin = Lower_CI, xmax = Upper_CI), height = 0.2) +
  geom_vline(xintercept = 1, linetype = "dashed", color = "green") +
  geom_text(aes(label = sprintf("%.2f", Odds_Ratio)), vjust = -1.2, size = 3.5) +
  scale_x_log10() +
  labs(
    x = "Odds Ratio (log scale)",
    y = "",
    title = "Odds Ratios for 'Dismissed' Exit Category by Race (Oregon)"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 12),
    plot.title = element_text(size = 14)
  )

```

### Running Cohen's h for DISMISSED

```{r}
# ✅ Step 1: Add a column for total exits (Dismissed + Not Dismissed)
df_ore_dismissed <- df_ore_dismissed %>%
  mutate(Total_Exits = Dismissed + Not_Dismissed)

```

```{r}
# ✅ Step 2: Calculate total Dismissed and total exits for Oregon overall
# (these will be used to compare each group against the rest of Oregon)
total_dismissed_all <- sum(df_ore_dismissed$Dismissed)
total_exits_all <- sum(df_ore_dismissed$Total_Exits)
```

```{r}
# ✅ Step 3: Define a function to compute Cohen's h from two proportions
compute_cohens_h <- function(p1, p2) {
  2 * abs(asin(sqrt(p1)) - asin(sqrt(p2)))
}
```

```{r}
# ✅ Step 4: Loop through each racial group to compute Cohen's h
# Each group's dismissed proportion is compared to the rest of Oregon

# Create an empty numeric vector to store results
cohens_h_values <- numeric(nrow(df_ore_dismissed))

for (i in seq_len(nrow(df_ore_dismissed))) {
  # Group's values
  group_dismissed <- df_ore_dismissed$Dismissed[i]
  group_total <- df_ore_dismissed$Total_Exits[i]
  p1 <- group_dismissed / group_total
  
  # Oregon average (excluding this group)
  other_dismissed <- total_dismissed_all - group_dismissed
  other_total <- total_exits_all - group_total
  p2 <- other_dismissed / other_total
  
  # Compute Cohen's h
  cohens_h_values[i] <- compute_cohens_h(p1, p2)
}
```

```{r}
# ✅ Add NA to match row count (if "National Average" is included)
cohens_h_values_padded <- c(cohens_h_values, NA)

# ✅ Then add to the summary table
summary_df_odds_dismissed$Cohens_h <- round(cohens_h_values_padded, 2)
```

```{r}
# ✅ Step 6: Create a basic version with just the essential columns
basic_table_dismissed <- summary_df_odds_dismissed %>%
  select(Race, Odds_Ratio, Lower_CI, Upper_CI, P_Value, Cohens_h)


```

```{r}
x
```
